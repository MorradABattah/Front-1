"use strict";
var _ = require("lodash");
var tap = require('gulp-tap');
var vfs = require("vinyl-fs");
var gitignore = require("gulp-gitignore");
var gutil = require("gulp-util");
var eclint = require("./eclint");
var cli = require('gitlike-cli');
var pkg = require('../package');
var reporter = require('gulp-reporter');
var filter = require('gulp-filter');
var fileType = require('file-type');
cli.on('error', function (err) {
    console.error('\n  ' + gutil.colors.red(err.toString()));
    err.command.outputUsage();
    err.command.outputCommands();
    err.command.outputOptions();
    process.exit(1);
});
cli.version(pkg.version);
cli.description(pkg.description);
function addSettings(cmd) {
    cmd.option('-c, --charset <charset>', 'Set to latin1, utf-8, utf-8-bom (see docs)');
    cmd.option('-i, --indent_style <style>', 'Set to tab or space');
    cmd.option('-s, --indent_size <n>', 'Set to a whole number or tab');
    cmd.option('-t, --tab_width <n>', 'Columns used to represent a tab character');
    cmd.option('-w, --trim_trailing_whitespace', 'Trims any trailing whitespace');
    cmd.option('-e, --end_of_line <newline>', 'Set to lf, cr, crlf');
    cmd.option('-n, --insert_final_newline', 'Ensures files ends with a newline');
    cmd.option('-m, --max_line_length <n>', 'Set to a whole number');
    cmd.option('--block_comment_start <string>', 'Block comments start with');
    cmd.option('--block_comment <string>', 'Lines in block comment start with');
    cmd.option('--block_comment_end <string>', 'Block comments end with');
}
function excludeBinaryFile(file) {
    return !(file && file.isBuffer() && fileType(file.contents));
}
function handleNegativeGlobs(files) {
    if (!files) {
        return [
            '**/*',
            // # Repository
            // Git
            '!.git/**/*',
            // Subversion
            '!.svn/**/*',
            // Mercurial
            '!.hg/**/*',
            // # Dependency directories
            '!node_modules/**/*',
            '!bower_components/**/*',
            // # macOS
            // Stores custom folder attributes
            '!**/.DS_Store',
            // Stores additional file resources
            '!**/.AppleDouble',
            // Contains the absolute path to the app to be used
            '!**/.LSOverride',
            // Resource fork
            '!**/__MACOSX/**/*',
            // # Windows
            // Image file cache
            '!**/Thumbs.db',
            // Folder config file
            '!**/ehthumbs.db',
        ];
    }
    return files.filter(function (file) { return (typeof file === 'string'); }).map(function (glob) { return (glob.replace(/^\[!\]/, '!')); });
}
var vfsOptions = {
    base: process.cwd(),
    dot: true,
    stripBOM: false
};
var check = cli.command('check [<files>...]');
check.description('Validate that file(s) adhere to .editorconfig settings');
addSettings(check);
check.action(function (args, options) {
    var stream = vfs.src(handleNegativeGlobs(args.files), vfsOptions)
        .pipe(filter(excludeBinaryFile))
        .pipe(args.files ? gutil.noop() : gitignore())
        .pipe(eclint.check({
        settings: _.pickBy(_.pick(options, eclint.ruleNames)),
    })).pipe(reporter({
        console: console.error,
        filter: null,
    }))
        .on('error', function (error) {
        if (error.plugin !== 'gulp-reporter') {
            console.error(error);
        }
        process.exit(1);
    });
    stream.resume();
});
var fix = cli.command('fix [<files>...]');
fix.description('Fix formatting errors that disobey .editorconfig settings');
addSettings(fix);
fix.option('-d, --dest <folder>', 'Destination folder to pipe source files');
fix.action(function (args, options) {
    var stream = vfs.src(handleNegativeGlobs(args.files), vfsOptions)
        .pipe(filter(excludeBinaryFile))
        .pipe(args.files ? gutil.noop() : gitignore())
        .pipe(eclint.fix({
        settings: _.pickBy(_.pick(options, eclint.ruleNames))
    }));
    if (options.dest) {
        return stream.pipe(vfs.dest(options.dest));
    }
    return stream.pipe(vfs.dest(function (file) {
        return file.base;
    }));
});
var infer = cli.command('infer [<files>...]');
infer.description('Infer .editorconfig settings from one or more files');
infer.option('-s, --score', 'Shows the tallied score for each setting');
infer.option('-i, --ini', 'Exports file as ini file type');
infer.option('-r, --root', 'Adds root = true to your ini file, if any');
infer.action(function (args, options) {
    return vfs.src(handleNegativeGlobs(args.files), vfsOptions)
        .pipe(filter(excludeBinaryFile))
        .pipe(args.files ? gutil.noop() : gitignore())
        .pipe(eclint.infer(options))
        .pipe(tap(function (file) {
        console.log(file.contents + '');
    }));
});
module.exports = cli;
//# sourceMappingURL=cli.js.map